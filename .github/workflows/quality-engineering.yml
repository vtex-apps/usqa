name: "[QE] Quality Engineering"

on:
#  # Just to make easier debug typos
#  workflow_dispatch:
#    inputs:
#      debugEnabled:
#        description: "Run the build with tmate debugging enabled"
#        type: boolean
#        required: false
#        default: false

  # Allow this to be called by others
  workflow_call:
    inputs:
      # -----------------------------------------------------------------------------------------
      # Danger
      # -----------------------------------------------------------------------------------------
      danger:
        description: "Run Danger?"
        type: boolean
        default: true
        required: false
      dangerRequireChangelog:
        description: "Require changelog version for Danger?"
        type: boolean
        default: false
        required: false
      # -----------------------------------------------------------------------------------------
      # Node.js
      # -----------------------------------------------------------------------------------------
      nodeLint:
        description: "Run Node.js lint?"
        type: boolean
        default: false
        required: false
      nodeTest:
        description: "Run Node.js unit tests on node folder?"
        type: boolean
        default: false
        required: false
      reactTest:
        description: "Run Node.js unit tests on react folder?"
        type: boolean
        default: false
        required: false
      nodeSonar:
        description: "Run Node.js SonarCloud?"
        type: boolean
        default: false
        required: false
      nodeSonarProjectKey:
        description: "What is the SonarCloud project for Node.js?"
        type: string
        default: none
        required: false
      nodeSonarOrganization:
        description: "What is the SonarCloud Organization for Node.js?"
        type: string
        default: none
        required: false
      # -----------------------------------------------------------------------------------------
      # .Net
      # -----------------------------------------------------------------------------------------
      dotnetLint:
        description: "Run .Net Lint?"
        type: boolean
        default: false
        required: false
      dotnetTest:
        description: "Run .Net unit tests?"
        type: boolean
        default: false
        required: false        
      dotnetVersion:
        description: "What is the .Net version?"
        type: string
        default: "3.0"
        required: false
      dotnetSonar:
        description: "Run SonarCloud for .Net?"
        type: boolean
        default: false
        required: false
      dotnetSonarProjectKey:
        description: "What is the SonarCloud project for .Net?"
        type: string
        default: none
        required: false
      dotnetSonarOrganization:
        description: "What is the SonarCloud Organization for .Net?"
        type: string
        default: none
        required: false
      # -----------------------------------------------------------------------------------------
      # Cypress
      # -----------------------------------------------------------------------------------------
      cypress:
        description: "Run E2E tests?"
        type: boolean
        default: false
        required: false
      cyRunnerBranch:
        description: "Which branch use in Cy-Runner?"
        type: string
        default: 'main'
        required: false
      cyRunnerTimeOut:
        description: "What is the time out for the Cy-Runner?"
        type: number
        default: 30
        required: false
        
    secrets:
      # -----------------------------------------------------------------------------------------
      # Secrets for GitHub token, SonarCloud token and Cypress JSON
      # -----------------------------------------------------------------------------------------
      githubToken:
        description: "A token to access GitHub"
        required: false
      sonarToken:
        description: "A token to have access to SonarCloud"
        required: false
      cypressJson:
        description: "A JSON secret to Cy-Runner job"
        required: false

jobs:
  # -----------------------------------------------------------------------------------------
  # Security check: if pull_request_target, then should have 'safe to test' label
  # -----------------------------------------------------------------------------------------
  safeCheck:
    name: "Security check"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      substantialChanges: ${{ steps.changes.outputs.substantialChanges }}
    steps:
#      - name: "Debug"
#        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debugEnabled }}
#        timeout-minutes: 5
#        uses: mxschmitt/action-tmate@28f608baaa037465aa887c21a7924e9e6b66a9e0 # v3.13
#        with:
#          limit-access-to-actor: true

      - name: "PR message to people outside VTEX"
        if: |
          github.event.pull_request.head.repo.fork == true && 
          !contains(github.event.pull_request.labels.*.name, 'safe to test')
        run: |
          echo "Security check failed"
          echo
          echo "ðŸ’¡ Thank you for submitting your contribution to this repository!"
          echo "To avoid bugs and security issues, your code must pass on our quality engineering workflow."
          echo "To start the pipeline, please, ask one VTEXer to read your code and add `safe to test` label."
          echo
          echo "Remember: If you do any changes after the approval, someone from VTEX needs to redo the label thing."
          exit 1

      - name: "Remove the label 'safe to test' to avoid run again on changed code"
        if: contains(github.event.pull_request.labels.*.name, 'safe to test')
        run: |
          echo "::group::Delete label"
          curl -sfX DELETE -H 'Accept: application/vnd.github.v3+json' -H 'Authorization: token ${{ secrets.githubToken }}' \
          'https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.number }}/labels/safe%20to%20test' &> /dev/null
          echo "::endgroup::"

      - name: "Trusted checkout"
        if: inputs.danger == true && github.event.pull_request.head.repo.fork == false &&
          ( github.event_name == 'pull_request' || github.event_name == 'pull_request_target' )
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0

      - name: "Untrusted checkout"
        if: inputs.danger == true && github.event.pull_request.head.repo.fork == true &&
          ( github.event_name == 'pull_request' || github.event_name == 'pull_request_target' )
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: "Set up Node.js"
        if: inputs.danger == true && ( github.event_name == 'pull_request' || github.event_name == 'pull_request_target' )
        uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516 # v3.5.1
        with:
          cache: yarn
          cache-dependency-path: "**/yarn.lock"
        continue-on-error: true

      - name: "Install Danger.js"
        if: inputs.danger == true && ( github.event_name == 'pull_request' || github.event_name == 'pull_request_target' )
        run: |
          echo "::group::Install Danger.js"
          yarn add --dev danger@11 danger-plugin-keepachangelog@1
          echo "::endgroup::"

      - name: "Run Danger.js"
        if: inputs.danger == true && ( github.event_name == 'pull_request' || github.event_name == 'pull_request_target' )
        env:
          GITHUB_TOKEN: ${{ secrets.githubToken }}
          REQUIRE_CHANGELOG_VERSION: ${{ inputs.dangerRequireChangelog }}
        run: |
          echo "::group::Create Danger.js base file"
          cat << EOF_JS > danger.js
            const { fail, warn, message, danger } = require("danger")
            const { keepachangelog } = require("danger-plugin-keepachangelog")
            const gb = danger.github
            const pr = gb?.pr
            const { additions = 0, deletions = 0 } = pr
            const modifiedFiles = danger.git?.created_files
            .concat(danger.git?.deleted_files)
            .concat(danger.git?.modified_files)
            const code = danger.git.fileMatch("dotnet/**", "react/**", "node/**", "**/*.js", "**/*.ts",
            "package.json", "messages/en.json", "messages/en-us.json")
            const pkgs = danger.git.fileMatch("package.json", "react/package.json", "node/package.json")
            const lock = danger.git.fileMatch("yarn.lock", "react/yarn.lock", "node/yarn.lock")
            const tool = danger.git.fileMatch(".github", "dangerfile.js", "package.json", "yarn.lock")
            const pkgsChanged = pkgs.modified || pkgs.created || pkgs.deleted || pkgs.edited
            const lockChanged = lock.modified || lock.created || lock.deleted || lock.edited
            const toolChanged = tool.modified || tool.created || tool.deleted || tool.edited
            const toolChangedConfirmation =  (pr.body + pr.title).includes("#changingTooling")
            const skipPackageLockSync =  (pr.body + pr.title).includes("#skipPackageChecks")
            if (gb) {
              if (code.modified || code.created || code.deleted || code.edited) console.log("SUBSTANTIAL_CHANGES")
              if (toolChanged) {
                if (toolChangedConfirmation) {
                  warn(":stop_sign: This PR **will change tooling**\n:bulb: Could be GitHub Actions, package.json, etc")
                } else {
                  fail("This PR **will change tooling**\n:bulb: add #changingTooling on your PR description as acknowledgment")
                  console.log("FAILED")
                }
              }
              if (pkgsChanged !== lockChanged) {
                if (skipPackageLockSync) {
                  warn("package.json was changed, but not yarn.lock (vice-versa)\n:bulb: are you sure this is right?")
                } else {
                  fail("package.json was changed, but not yarn.lock (vice-versa)\n:bulb: add #skipPackageChecks on your PR description as acknowledgment")
                  console.log("FAILED")
                }
              }
              if (modifiedFiles?.length > 15 || additions + deletions > 420) {
                warn("Looks like this PR is too large\n:bulb: smaller PRs are easy to review and approve")
              }
              if (pr.body?.length < 10) {
                fail("Provide or increase the description for this PR\n:bulb: at least 10 chars... better it is, better will be to approve it")
                console.log("FAILED")
              }
              keepachangelog({ changeVersion: $REQUIRE_CHANGELOG_VERSION })
              message(":heart: Thanks!")
              message(":tada: PR additions =  " + additions + ", PR deletions = " + deletions)
            }
          EOF_JS
          if [[ -f dangerfile.js ]]; then cat dangerfile.js >> danger.js; fi
          echo "::endgroup::"
          echo "::group::Run Danger.js"
          yarn danger ci -d danger.js &> danger.out
          echo "::endgroup::"

      - name: "Check for substantial changes"
        id: changes
        run: |
          SUBSTANTIAL_CHANGES=true
          FAILED=false
          if [[ -f danger.out ]]; then
            # As the fork will not be always present, we need a little hack here
            if [[ "${{ github.event.pull_request.head.repo.fork }}X" != "X" ]]; then
              if [[ "${{ github.event.pull_request.head.repo.fork }}X" == "falseX" ]]; then
                 CHECK=$(grep SUBSTANTIAL_CHANGES danger.out || echo)
                 [[ -z $CHECK ]] && SUBSTANTIAL_CHANGES=false
              fi
            fi
            CHECK=$(grep FAILED danger.out || echo)
            [[ -n $CHECK ]] && FAILED=true
          fi
          echo "Do we have substantial changes? --> $SUBSTANTIAL_CHANGES"
          echo "Does Danger failed? --> $FAILED"
          echo "substantialChanges=$SUBSTANTIAL_CHANGES" >> $GITHUB_OUTPUT  

  # -----------------------------------------------------------------------------------------
  # Job to run Lint (Node.js)
  # -----------------------------------------------------------------------------------------
  nodeLint:
    name: "Lint Node.js"
    if: ${{ inputs.nodeLint || inputs.nodeSonar || inputs.nodeTest }}
    runs-on: ubuntu-latest
    needs: [safeCheck]
    timeout-minutes: 5
    steps:
      - name: "Trusted checkout"
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0
        if: github.event.pull_request.head.repo.fork == false

      - name: "Untrusted checkout"
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0
        if: github.event.pull_request.head.repo.fork == true
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: "Lint JSON"
        run: |
          echo "::group::Lint Json"
          FAILED=0
          find -name "*.json" -not -path "*/node_modules/*" -not -path "./dotnet*" | while read json; do
            ERR=0
            jq . -cM "$json" 1>/dev/null 2>error || ERR=1
            if [[ $ERR -eq 0 ]]; then
              echo "OK: $json"
            else
              FAILED=1
              echo "ERROR: $json"
              MSG=$(sed 's/\(.*\) at line \(.*\), column \(.*\)$/\1;\2;\3/' error)
              F="$json"
              E="$(echo $MSG | cut -d ';' -f1)"
              L="$(echo $MSG | cut -d ';' -f2)"
              C="$(echo $MSG | cut -d ';' -f3)"
              echo "::error file=$F,line=$L,col=$C::$E"
            fi
          done
          echo "::endgroup::"
          if [[ $FAILED -eq 1 ]]; then exit 1; fi

      - name: "Set up Node.js"
        if: needs.safeCheck.outputs.substantialChanges == 'true' || github.event_name == 'push'
        uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516 # v3.5.1
        with:
          cache: yarn
          cache-dependency-path: "**/yarn.lock"
        continue-on-error: true

      - name: "Install packages"
        if: needs.safeCheck.outputs.substantialChanges == 'true' || github.event_name == 'push'
        run: |
          echo "::group::Install root packages"
          [[ -f 'package.json' ]] && yarn install --frozen-lockfile
          echo "::endgroup::"
          for DIR in $(find -mindepth 2 -maxdepth 2 -name package.json | cut -d/ -f2); do
            if [[ $DIR != 'checkout-ui-custom' ]]; then
              echo "::group::Install $DIR packages"
              cd "$DIR"
              yarn install --frozen-lockfile
              cd -
              echo "::endgroup::"
            fi
          done

      - name: "Run lint"
        if: needs.safeCheck.outputs.substantialChanges == 'true' || github.event_name == 'push'
        run: |
          echo "::group::Lint Node.js"
          yarn lint
          echo "::endgroup::"

  # -----------------------------------------------------------------------------------------
  # Job to run tests (Node.js on node folder)
  # -----------------------------------------------------------------------------------------
  nodeTest:
    name: "Test Node.js"
    if: ${{ inputs.nodeTest }}
    runs-on: ubuntu-latest
    needs: [safeCheck]
    timeout-minutes: 5
    steps:
      - name: "Trusted checkout"
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0
        if: github.event.pull_request.head.repo.fork == false

      - name: "Untrusted checkout"
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0
        if: github.event.pull_request.head.repo.fork == true
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: "Set up Node.js"
        uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516 # v3.5.1
        with:
          cache: yarn
          cache-dependency-path: "**/yarn.lock"
        continue-on-error: true

      - name: "Install packages"
        run: |
          echo "::group::Install root packages"
          [[ -f 'package.json' ]] && yarn install --frozen-lockfile
          echo "::endgroup::"
          for DIR in $(find -mindepth 2 -maxdepth 2 -name package.json | cut -d/ -f2); do
            if [[ $DIR != 'checkout-ui-custom' ]]; then
              echo "::group::Install $DIR packages"
              cd "$DIR"
              yarn install --frozen-lockfile
              cd -
              echo "::endgroup::"
            fi
          done

      - name: "Run unit tests on node folder"
        run: |
          echo "::group::Unit tests - node folder"
          yarn test --coverage
          echo "::endgroup::"
        working-directory: node

  # -----------------------------------------------------------------------------------------
  # Job to run tests (Node.js on react folder)
  # -----------------------------------------------------------------------------------------
  reactTest:
    name: "Test React"
    if: ${{ inputs.reactTest }}
    runs-on: ubuntu-latest
    needs: [safeCheck]
    timeout-minutes: 5
    steps:
      - name: "Trusted checkout"
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0
        if: github.event.pull_request.head.repo.fork == false

      - name: "Untrusted checkout"
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0
        if: github.event.pull_request.head.repo.fork == true
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: "Set up Node.js"
        uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516 # v3.5.1
        with:
          cache: yarn
          cache-dependency-path: "**/yarn.lock"
        continue-on-error: true

      - name: "Install packages"
        run: |
          echo "::group::Install root packages"
          [[ -f 'package.json' ]] && yarn install --frozen-lockfile
          echo "::endgroup::"
          for DIR in $(find -mindepth 2 -maxdepth 2 -name package.json | cut -d/ -f2); do
            if [[ $DIR != 'checkout-ui-custom' ]]; then
              echo "::group::Install $DIR packages"
              cd "$DIR"
              yarn install --frozen-lockfile
              cd -
              echo "::endgroup::"
            fi
          done

      - name: "Run unit tests on react folder"
        run: |
          echo "::group::Unit tests - react folder"
          yarn test --coverage
          echo "::endgroup::"
        working-directory: react

  # -----------------------------------------------------------------------------------------
  # Job to run SonarCloud (Node.js)
  # -----------------------------------------------------------------------------------------
  nodeSonar:
    name: "Scan Node.js"
    if: always()
      && ( inputs.nodeSonar )
      && ( github.actor != 'dependabot[bot]' )
      && ( github.event.pull_request.draft == false )
      && ( needs.safeCheck.result == 'success')
      && ( needs.nodeLint.result == 'success' || needs.nodeLint.result == 'skipped')
      && ( needs.nodeTest.result == 'success' || needs.nodeTest.result == 'skipped')
      && ( needs.reactTest.result == 'success' || needs.reactTest.result == 'skipped')
    runs-on: ubuntu-latest
    needs: [safeCheck, nodeLint, nodeTest, reactTest]
    timeout-minutes: 5
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-nodejs
    steps:
      - name: "Trusted checkout"
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0
        if: github.event.pull_request.head.repo.fork == false

      - name: "Untrusted checkout"
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0
        if: github.event.pull_request.head.repo.fork == true
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          fetch-depth: 0

      - name: "Set up Node.js"
        uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516 # v3.5.1
        with:
          cache: yarn
          cache-dependency-path: "**/yarn.lock"
        continue-on-error: true

      - name: "Install packages"
        run: |
          echo "::group::Install root packages"
          [[ -f 'package.json' ]] && yarn install --frozen-lockfile
          echo "::endgroup::"
          for DIR in $(find -mindepth 2 -maxdepth 2 -name package.json | cut -d/ -f2); do
            if [[ $DIR != 'checkout-ui-custom' ]]; then
              echo "::group::Install $DIR packages"
              cd "$DIR"
              yarn install --frozen-lockfile
              cd -
              echo "::endgroup::"
            fi
          done

      - name: "Generate Node coverage report"
        if: ${{ inputs.nodeTest }}
        run: yarn test --coverage
        working-directory: node

      - name: "Generate React coverage report"
        if: ${{ inputs.reactTest }}
        run: yarn test --coverage
        working-directory: react

      - name: "Trusted SonarCloud Scan"
        if: github.event.pull_request.head.repo.fork == false
        uses: SonarSource/sonarcloud-github-action@156db6fef3e168e4972abb76de0b32bbce8ec77a # v1.7
        env:
          GITHUB_TOKEN: ${{ secrets.githubToken }}
          SONAR_TOKEN: ${{ secrets.sonarToken }}
        with:
          args: >
            -Dsonar.projectKey=${{ inputs.nodeSonarProjectKey }}
            -Dsonar.organization=${{ inputs.nodeSonarOrganization }}

      - name: "Untrusted SonarCloud Scan"
        if: github.event.pull_request.head.repo.fork == true
        uses: SonarSource/sonarcloud-github-action@156db6fef3e168e4972abb76de0b32bbce8ec77a # v1.7
        env:
          GITHUB_TOKEN: ${{ secrets.githubToken }}
          SONAR_TOKEN: ${{ secrets.sonarToken }}
        with:
          args: >
            -Dsonar.projectKey=${{ inputs.nodeSonarProjectKey }}
            -Dsonar.organization=${{ inputs.nodeSonarOrganization }}
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
            -Dsonar.pullrequest.branch=${{ github.event.pull_request.head.ref }}
            -Dsonar.scm.revision=${{ github.event.pull_request.head.sha }}

      - name: "Process SonarCloud results"
        env:
          GITHUB_TOKEN: ${{ secrets.githubToken }}
          SONAR_TOKEN: ${{ secrets.sonarToken }}
        run: |
          echo "::group::Read SonarCloud job details"
          TASK_URL=$(sed -nr 's/ceTaskUrl=(.*)/\1/p' report-task.txt)
          STATUS='FAILURE'
          MAX_TRY=5
          TRY=1
          while [[ $STATUS != 'SUCCESS' && $TRY -le $MAX_TRY ]]; do
            echo -n "Trying to get status from SonarCloud ($TRY of $MAX_TRY)... "
            sleep 5
            STATUS=$(curl -s -u $SONAR_TOKEN: $TASK_URL | jq .task.status | sed s/\"//g)
            echo "$STATUS."
            TRY=$(( $TRY + 1 ))
          done
          echo "::endgroup::"
          if [[ $STATUS == 'SUCCESS' ]]; then
            echo "::group::Read SonarCloud analysis results"
            echo -n "Trying to get analysis ID from SonarCloud... "
            sleep 5
            ANALISYS_ID=$(curl -s -u $SONAR_TOKEN: $TASK_URL | jq -r .task.analysisId)
            echo "$ANALISYS_ID."
            TRY=1
            GATE_API='https://sonarcloud.io/api/qualitygates'
            while [[ $GATE_STATUS != 'OK' &&  $GATE_STATUS != 'ERROR' ]]; do
              echo -n "Checking Quality Gate info ($TRY)... "
              sleep 5
              GATE_STATUS=$(curl -s -u $SONAR_TOKEN: "$GATE_API/project_status?analysisId=${ANALISYS_ID}" | jq -r .projectStatus.status)
              echo "$GATE_STATUS."
             TRY=$(( $TRY + 1 ))
            done
            if [[ $GATE_STATUS == 'OK' ]]; then
              exit 0
            else
              echo "The quality gate failed. Please, review the reasons on SonarCloud!"
              exit 1
            fi
            echo "::endgroup::"
          else
            echo 'The analysis failed. Please, review your settings and sonar token!'
            exit 2
          fi
        working-directory: .scannerwork


  # -----------------------------------------------------------------------------------------
  # Job to run Lint (.Net)
  # -----------------------------------------------------------------------------------------
  dotnetLint:
    name: "Lint .Net"
    if: inputs.dotnetLint && github.actor != 'dependabot[bot]' && github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    needs: [safeCheck]
    timeout-minutes: 10
    steps:
      - name: "Trusted checkout"
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0
        if: github.event.pull_request.head.repo.fork == false

      - name: "Untrusted checkout"
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0
        if: github.event.pull_request.head.repo.fork == true
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: "Lint JSON"
        run: |
          echo "::group::Lint JSON"
          FAILED=0
          find -name "*.json" -not -path "./react*" -not -path "./node*" | while read json; do
            ERROR=0
            jq . -cM "$json" 1>/dev/null 2>error || ERROR=1
            if [[ $ERROR -eq 0 ]]; then
              echo "OK: $json"
            else
              FAILED=1
              echo "ERROR: $json"
              MSG=$(sed 's/\(.*\) at line \(.*\), column \(.*\)$/\1;\2;\3/' error)
              F="$json"
              E="$(echo $MSG | cut -d ';' -f1)"
              L=$(echo $MSG | cut -d ';' -f2)
              C=$(echo $MSG | cut -d ';' -f3)
              echo "::error file=$F,line=$L,col=$C::$E"
            fi
          done
          echo "::endgroup::"
          if [[ $FAILED -eq 1 ]]; then
            exit 1;
          fi

      - name: "Setup .Net"
        uses: actions/setup-dotnet@4d4a70f4a5b2a5a5329f13be4ac933f2c9206ac0 # v3.0.2
        with:
          dotnet-version: ${{ inputs.dotnetVersion }}

      - name: "Restore .Net packages"
        run: |
          echo "::group::Restore packages"
          dotnet restore
          echo "::endgroup::"

      - name: "Lint .Net"
        run: |
          echo "::group::Lint .Net"
          dotnet build --configuration Release --no-restore
          echo "::endgroup::"
        working-directory: dotnet

  # -----------------------------------------------------------------------------------------
  # Job to run Tests (.Net)
  # -----------------------------------------------------------------------------------------
  dotnetTest:
    name: 'Test .Net'
    if: ( inputs.dotnetTest ) && ( github.actor != 'dependabot[bot]' )  && ( github.event.pull_request.draft == false )
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [safeCheck]
    steps:
      - name: "Trusted checkout"
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0
        if: github.event.pull_request.head.repo.fork == false

      - name: "Untrusted checkout"
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0
        if: github.event.pull_request.head.repo.fork == true
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: "Setup .Net"
        uses: actions/setup-dotnet@4d4a70f4a5b2a5a5329f13be4ac933f2c9206ac0 # v3.0.2
        with:
          dotnet-version: ${{ inputs.dotnetVersion }}

      - name: "Restore .Net packages"
        run: |
          echo "::group::Restore packages"
          dotnet restore
          echo "::endgroup::"

      - name: "Build .Net"
        run: |
          echo "::group::Build .Net"
          dotnet build --configuration Release --no-restore &> /dev/null
          echo "::endgroup::"

      - name: "Test .Net"
        run: |
          echo "::group::Test .Net"
          dotnet test --no-restore --verbosity normal
          echo "::endgroup::"

  # -----------------------------------------------------------------------------------------
  # Job to run SonarCloud (.Net)
  # -----------------------------------------------------------------------------------------
  dotnetSonar:
    name: "Scan .Net"
    if: always()
      && ( inputs.dotnetSonar )
      && ( github.actor != 'dependabot[bot]' )
      && ( github.event.pull_request.draft == false )
      && ( needs.safeCheck.result == 'success')
      && ( needs.dotnetLint.result == 'success' || needs.dotnetLint.result == 'skipped')
      && ( needs.dotnetTest.result == 'success' || needs.dotnetTest.result == 'skipped')
    runs-on: windows-latest
    timeout-minutes: 10
    needs: [safeCheck, dotnetLint, dotnetTest]
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-dotNet
    steps:
      - name: "Set up JDK 11"
        uses: actions/setup-java@de1bb2b0c5634f0fc4438d7aa9944e68f9bf86cc # v3.6.0
        with:
          java-version: 1.11

      - name: "Trusted checkout"
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0
        if: github.event.pull_request.head.repo.fork == false

      - name: "Untrusted checkout"
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0
        if: github.event.pull_request.head.repo.fork == true
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          fetch-depth: 0

      - name: "Cache SonarCloud packages"
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7 # v3.0.11
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar-vtex
          restore-keys: ${{ runner.os }}-sonar-vtex

      - name: "Cache SonarCloud scanner"
        id: cache-sonar-scanner
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7 # v3.0.11
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner-vtex
          restore-keys: ${{ runner.os }}-sonar-scanner-vtex

      - name: "Install SonarCloud scanner"
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: "Build and analyze"
        env:
          GITHUB_TOKEN: ${{ secrets.githubToken }}
          SONAR_TOKEN: ${{ secrets.sonarToken }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"${{ inputs.dotnetSonarProjectKey }}" /o:"${{ inputs.dotnetSonarOrganization }}" /d:sonar.login="${{ secrets.sonarToken }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet clean
          dotnet build
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.sonarToken }}"

  # -----------------------------------------------------------------------------------------
  # Job to run Cypress
  # -----------------------------------------------------------------------------------------
  cypress:
    name: 'E2E'
    if: always()
      && ( inputs.cypress )
      && ( github.actor != 'dependabot[bot]' )
      && ( github.event.pull_request.draft == false )
      && ( needs.safeCheck.result == 'success')
      && ( needs.nodeLint.result == 'success' || needs.nodeLint.result == 'skipped')
      && ( needs.nodeTest.result == 'success' || needs.nodeTest.result == 'skipped')
      && ( needs.reactTest.result == 'success' || needs.reactTest.result == 'skipped')
      && ( needs.nodeSonar.result == 'success' || needs.nodeSonar.result == 'skipped')
      && ( needs.dotnetLint.result == 'success' || needs.dotnetLint.result == 'skipped')
      && ( needs.dotnetTest.result == 'success' || needs.dotnetTest.result == 'skipped')
      && ( needs.dotnetSonar.result == 'success' || needs.dotnetSonar.result == 'skipped')
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.cyRunnerTimeOut }}
    needs: [safeCheck, nodeLint, nodeTest, reactTest, nodeSonar, dotnetLint, dotnetTest, dotnetSonar]
    concurrency:
      group: ${{ github.workflow }}
    steps:
      - name: "Trusted checkout"
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0
        if: github.event.pull_request.head.repo.fork == false

      - name: "Untrusted checkout"
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0
        if: github.event.pull_request.head.repo.fork == true
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: "Checkout Cy-Runner"
        if: needs.safeCheck.outputs.substantialChanges == 'true'
          || github.event_name == 'schedule'
          || github.event_name == 'workflow_dispatch'
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # v3.1.0
        with:
          repository: vtex-apps/cy-runner
          ref: ${{ inputs.cyRunnerBranch }}
          path: cy-runner

      - name: "Set up Node.js"
        if: needs.safeCheck.outputs.substantialChanges == 'true'
          || github.event_name == 'schedule'
          || github.event_name == 'workflow_dispatch'
        uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516 # v3.5.1
        with:
          cache: yarn
          cache-dependency-path: "cy-runner/yarn.lock"
        continue-on-error: true

      - name: "Install packages"
        if: needs.safeCheck.outputs.substantialChanges == 'true'
          || github.event_name == 'schedule'
          || github.event_name == 'workflow_dispatch'
        run: |
          echo "::group::Install root packages"
          [[ -f 'package.json' ]] && yarn install --frozen-lockfile
          echo "::endgroup::"
          for DIR in $(find -mindepth 2 -maxdepth 2 -name package.json | cut -d/ -f2); do
            if [[ $DIR != 'checkout-ui-custom' ]]; then
              echo "::group::Install $DIR packages"
              cd "$DIR"
              yarn install --frozen-lockfile
              cd -
              echo "::endgroup::"
            fi
          done

      - name: "Cypress smoke test"
        if: needs.safeCheck.outputs.substantialChanges == 'true'
          || github.event_name == 'schedule'
          || github.event_name == 'workflow_dispatch'
        run: |
          echo "::group::Verify Cypress"
          yarn cypress verify
          echo "::endgroup::"          
          echo "::group::Get Cypress info"
          yarn cypress info
          echo "::endgroup::"
          echo "::group::Run smoke test"
          yarn cypress run --browser chrome --quiet --project test
          echo "::endgroup::"
        working-directory: cy-runner

      - name: "Redirect secrets and clean environment"
        if: needs.safeCheck.outputs.substantialChanges == 'true'
          || github.event_name == 'schedule'
          || github.event_name == 'workflow_dispatch'
        run: |
          echo $VTEX_QE > .VTEX_QE.json
          rm -rf .git
        env:
          VTEX_QE: ${{ secrets.cypressJSON }}
        working-directory: cy-runner

      - name: "Set up VTEX Toolbelt"
        if: needs.safeCheck.outputs.substantialChanges == 'true'
          || github.event_name == 'schedule'
          || github.event_name == 'workflow_dispatch'
        uses: vtex/action-toolbelt@v8
        with:
          account: productusqa
          jsonFile: cy-runner/.VTEX_QE.json

      - name: "Reserve account level resources"
        id: lock
        if: needs.safeCheck.outputs.substantialChanges == 'true'
          || github.event_name == 'schedule'
          || github.event_name == 'workflow_dispatch'
        run: |
          CONFIG='cy-runner.yml'
          LOCK='false'
          if [[ -f $CONFIG ]]; then
            if [[ $(yq '.workspace.reserveAccount.enabled' cy-runner.yml) == 'true' ]]; then
               LOCK='true'
               yq -i '.workspace.reserveAccount.enabled = false' cy-runner.yml
               node cy-runner/node/lock.js reserve
            fi
          fi
          echo 
          echo "unlock=$LOCK" >> $GITHUB_ENV

      - name: "Run Cy-Runner"
        if: needs.safeCheck.outputs.substantialChanges == 'true'
          || github.event_name == 'schedule'
          || github.event_name == 'workflow_dispatch'
        run: node cy-runner
        working-directory: cy-runner

      - name: "Analyze Cy-Runner output"
        id: cyr
        if: always()
          && (needs.safeCheck.outputs.substantialChanges == 'true'
          || github.event_name == 'schedule'
          || github.event_name == 'workflow_dispatch')
        run: |
          DECORATOR='false'
          LOGS='false'
          [[ -f logs/_cy-decorator.txt ]] && DECORATOR='true'
          [[ -f logs/_cy-runner.log ]] && LOGS='true'
          echo "decorator=$DECORATOR" >> $GITHUB_ENV
          echo "logs=$LOGS" >> $GITHUB_ENV
        working-directory: cy-runner
        continue-on-error: true

      - name: "Release account level resources"
        if: always() && steps.lock.outputs.unlock == 'true'
        run: node cy-runner/node/lock.js release
        continue-on-error: true

      - name: "Add decorator on PR"
        if: always()
          && (github.event_name == 'pull_request' || github.event_name == 'pull_request_target')
          && steps.cyr.outputs.decorator == 'true'
        uses: marocchino/sticky-pull-request-comment@97bddef64db61b9d80edc69593cc4e4c415c3362 # v2.2.1
        with:
          recreate: true
          path: cy-runner/logs/_cy-decorator.txt
        continue-on-error: true

      - name: "Sanitize logs"
        if: always() && steps.cyr.outputs.logs == 'true'
        run: sed -i -e /Bearer/d -e /Basic/d $(ls *.{json,yml,yaml,txt,log} 2> /dev/null | xargs)
        working-directory: cy-runner/logs

      - name: "Save artifacts"
        uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # v3.1.0
        if: always() && steps.cyr.outputs.logs == 'true'
        with:
          name: cy-runner-logs
          path: |
            cy-runner/logs
            !cy-runner/logs/**/*.mp4
          retention-days: 3
