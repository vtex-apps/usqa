name: '[QE] Quality Engineering'

on:
  # Just to make easier debug typos
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with tmate debugging enabled'
        type: boolean
        required: false
        default: false
  # Allow this to be called by others
  workflow_call:
    inputs:
      # -----------------------------------------------------------------------------------------
      # Danger Section
      # -----------------------------------------------------------------------------------------
      danger:
        description: 'Run node Danger action?'
        type: boolean
        default: false
        required: false
      dangerRequireChangelog:
        description: 'Require changlog version for Danger?'
        type: boolean
        default: false
        required: false
      # -----------------------------------------------------------------------------------------
      # Node JS Section [Lint, Tests, Sonar]
      # -----------------------------------------------------------------------------------------
      nodeLint:
        description: 'Run node lint?'
        type: boolean
        default: false
        required: false
      nodeTest:
        description: 'Run node unit tests?'
        type: boolean
        default: false
        required: false
      nodeSonar:
        description: 'Run node SonarCloud?'
        type: boolean
        default: false
        required: false
      nodeSonarProjectKey:
        description: 'What is the SonarCloud project for Node?'
        type: string
        default: none
        required: false
      nodeSonarOrganization:
        description: 'What is the SonarCloud Organization for Node?'
        type: string
        default: none
        required: false
      # -----------------------------------------------------------------------------------------
      # dotNet Section [Sonar]
      # -----------------------------------------------------------------------------------------
      dotnetSonar:
        description: 'Run SonarCloud for dotNet?'
        type: boolean
        default: false
        required: false
      dotnetSonarProjectKey:
        description: 'What is the SonarCloud project for dotnet?'
        type: string
        default: none
        required: false
      dotnetSonarOrganization:
        description: 'What is the SonarCloud Organization for dotnet?'
        type: string
        default: none
        required: false
      # -----------------------------------------------------------------------------------------
      # Cypress section
      # -----------------------------------------------------------------------------------------
      cypress:
        description: 'Do E2E tests?'
        type: boolean
        default: false
        required: false
    secrets:
      # -----------------------------------------------------------------------------------------
      # Secrets for GitHub token, SonarCloud token and Cypress JSON
      # -----------------------------------------------------------------------------------------
      githubToken:
        description: 'A token to access GitHub staff'
        required: false
      sonarToken:
        description: 'A token to have access to SonarCloud'
        required: false
      cypressJson:
        description: 'A JSON to pass make Cy-Runner works'
        required: false

jobs:
  # -----------------------------------------------------------------------------------------
  # Job to check here if it is safe to run it on pull_request_target events
  # -----------------------------------------------------------------------------------------
  safeCheck:
    name: 'Security check'
    runs-on: ubuntu-latest
    timeout-minutes: 1
    outputs:
      substantialChanges: ${{ steps.changed-files.outputs.only_changed }}
    steps:
      - name: 'Stop if from out side without the label "safe to test"'
        if: >-
          ( github.event.pull_request.head.repo.fork == true ) &&
          ( !contains(github.event.pull_request.labels.*.name, 'safe to test') )
        run: |
          echo "Attention:"
          echo " "
          echo "ðŸ’¡ Thank you for submitting your contribution on this repository!"
          echo "   Before merge this PR, it must pass our Quality Engineering process."
          echo "   Please, ask for someone from VTEX to read your changes and add the label 'safe to test' on your PR."
          echo " "
          echo "   If you made changes after the approval, someone needs redo the label thing."
          exit 1
      - name: 'Remove the label "safe to test" to avoid run again on changed code'
        if: ( contains(github.event.pull_request.labels.*.name, 'safe to test') )
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          labels: safe to test
          GITHUB_TOKEN: ${{ secrets.githubToken }}
      - name: 'Trusted checkout'
        uses: actions/checkout@v3
        if: ( github.event.pull_request.head.repo.fork == false )
        with:
          fetch-depth: 0
      - name: 'Untrusted checkout'
        uses: actions/checkout@v3
        if: ( github.event.pull_request.head.repo.fork == true )
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          fetch-depth: 0
      - name: 'Get changed files'
        id: changed-files
        uses: tj-actions/changed-files@v22.2
        with:
          files_ignore: |
            CHANGELOG.md
            docs/**
            .github/**
      - name: 'Do we have substantial changes?'
        run: echo ${{ steps.changed-files.outputs.only_changed }}
      - name: Debug
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
        timeout-minutes: 5
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true

  # -----------------------------------------------------------------------------------------
  # Job to run Danger
  # -----------------------------------------------------------------------------------------
  danger:
    name: 'Danger'
    if: ${{ inputs.danger }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [safeCheck]
    steps:
      - name: 'Trusted checkout'
        uses: actions/checkout@v3
        if: ( github.event.pull_request.head.repo.fork == false )
      - name: 'Untrusted checkout'
        uses: actions/checkout@v3
        if: ( github.event.pull_request.head.repo.fork == true )
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
      - name: 'Set up NodeJS'
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: yarn
      - name: 'Danger CI'
        uses: vtex/danger@master
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          REQUIRE_CHANGELOG_VERSION: ${{ inputs.dangerRequireChangelog }}

  # -----------------------------------------------------------------------------------------
  # Job to run Lint (node)
  # -----------------------------------------------------------------------------------------
  nodeLint:
    name: 'Lint / node'
    if: ${{ inputs.nodeLint || inputs.nodeSonar || inputs.nodeTest}}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [safeCheck]
    steps:
      - name: 'Trusted checkout'
        uses: actions/checkout@v3
        if: ( github.event.pull_request.head.repo.fork == false )
      - name: 'Untrusted checkout'
        uses: actions/checkout@v3
        if: ( github.event.pull_request.head.repo.fork == true )
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
      - name: 'Set up NodeJS'
        if: ( needs.safeCheck.outputs.substantialChanges == true ) || ( github.event_name == 'push' )
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: yarn
      - name: 'Install packages'
        if: ( needs.safeCheck.outputs.substantialChanges == true ) || ( github.event_name == 'push' )
        run: |
          PWD=$(pwd)
          for DIR in '.' 'node' 'react'; do
            if [[ -f "$DIR/package.json" ]]; then
              echo "Installing $DIR packages..."
              cd "$PWD/$DIR"
              yarn install --frozen-lockfile
            fi
          done
      - name: 'Run lint'
        if: ( needs.safeCheck.outputs.substantialChanges == true ) || ( github.event_name == 'push' )
        run: yarn lint

  # -----------------------------------------------------------------------------------------
  # Job to run tests (node)
  # -----------------------------------------------------------------------------------------
  nodeTest:
    name: 'Unit tests / node'
    if: ${{ inputs.nodeTest }}
    runs-on: ubuntu-latest
    needs: [nodeLint]
    timeout-minutes: 5
    steps:
      - name: 'Trusted checkout'
        uses: actions/checkout@v3
        if: ( github.event.pull_request.head.repo.fork == false )
      - name: 'Untrusted checkout'
        uses: actions/checkout@v3
        if: ( github.event.pull_request.head.repo.fork == true )
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
      - name: 'Set up NodeJS'
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: yarn
      - name: 'Run test on every builder directory'
        uses: vtex/action-io-app-test@master

  # -----------------------------------------------------------------------------------------
  # Job to run SonarCloud (node)
  # -----------------------------------------------------------------------------------------
  nodeSonar:
    name: 'Sonar / node'
    if: ( inputs.nodeSonar ) && ( github.actor != 'dependabot[bot]' )
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [nodeLint]
    concurrency:
      group: ${{ github.workflow }}-${{ github.actor }}
    steps:
      - name: 'Trusted checkout'
        uses: actions/checkout@v3
        if: ( github.event.pull_request.head.repo.fork == false )
        with:
          fetch-depth: 0
      - name: 'Untrusted checkout'
        uses: actions/checkout@v3
        if: ( github.event.pull_request.head.repo.fork == true )
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          fetch-depth: 0
      - name: 'Set up NodeJS'
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: yarn
      - name: 'Install packages'
        run: |
          PWD=$(pwd)
          for DIR in '.' 'node' 'react'; do
            if [[ -f "$DIR/package.json" ]]; then
              echo "Installing $DIR packages..."
              cd "$PWD/$DIR"
              yarn install --frozen-lockfile
            fi
          done
      - name: 'Trusted SonarCloud Scan'
        if: ( github.event.pull_request.head.repo.fork == false )
        uses: SonarSource/sonarcloud-github-action@v1.6
        env:
          GITHUB_TOKEN: ${{ secrets.githubToken }}
          SONAR_TOKEN: ${{ secrets.sonarToken }}
        with:
          args: >
            -Dsonar.projectKey=${{ inputs.nodeSonarProjectKey }}
            -Dsonar.organization=${{ inputs.nodeSonarOrganization }}
      - name: 'Untrusted SonarCloud Scan'
        if: ( github.event.pull_request.head.repo.fork == true )
        uses: SonarSource/sonarcloud-github-action@v1.6
        env:
          GITHUB_TOKEN: ${{ secrets.githubToken }}
          SONAR_TOKEN: ${{ secrets.sonarToken }}
        with:
          args: >
            -Dsonar.projectKey=${{ inputs.nodeSonarProjectKey }}
            -Dsonar.organization=${{ inputs.nodeSonarOrganization }}
            -Dsonar.pullrequest.key=${{ github.event.pull_request.number }} 
            -Dsonar.pullrequest.branch=${{ github.event.pull_request.head.ref }} 
            -Dsonar.scm.revision=${{ github.event.pull_request.head.sha }}

  # -----------------------------------------------------------------------------------------
  # Job to run SonarCloud (.Net)
  # -----------------------------------------------------------------------------------------
  dotnetSonar:
    name: 'Sonar / dotnet'
    if: ( inputs.dotnetSonar ) && ( github.actor != 'dependabot[bot]' )
    runs-on: windows-latest
    timeout-minutes: 10
    needs: [safeCheck]
    concurrency:
      group: ${{ github.workflow }}-${{ github.actor }}
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - name: 'Trusted checkout'
        uses: actions/checkout@v3
        if: ( github.event.pull_request.head.repo.fork == false )
        with:
          fetch-depth: 0
      - name: 'Untrusted checkout'
        uses: actions/checkout@v3
        if: ( github.event.pull_request.head.repo.fork == true )
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          fetch-depth: 0
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar-vtex
          restore-keys: ${{ runner.os }}-sonar-vtex
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner-vtex
          restore-keys: ${{ runner.os }}-sonar-scanner-vtex
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.githubToken }}
          SONAR_TOKEN: ${{ secrets.sonarToken }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"${{ inputs.dotnetSonarProjectKey }}" /o:"${{ inputs.dotnetSonarOrganization }}" /d:sonar.login="${{ secrets.sonarToken }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet clean
          dotnet build
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  # -----------------------------------------------------------------------------------------
  # Job to run Cypress
  # -----------------------------------------------------------------------------------------
  cypress:
    name: 'Cypress'
    if: ( inputs.cypress ) && ( github.event.pull_request.draft == false )
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [safeCheck]
    concurrency:
      group: ${{ github.workflow }}
    steps:
      - name: 'Trusted checkout'
        uses: actions/checkout@v3
        if: ( github.event.pull_request.head.repo.fork == false )
      - name: 'Untrusted checkout'
        uses: actions/checkout@v3
        if: ( github.event.pull_request.head.repo.fork == true )
      - name: 'Checkout Cy-Runner'
        if: ( needs.safeCheck.outputs.substantialChanges == true ) || ( github.event_name == 'schedule' )
        uses: actions/checkout@v3
        with:
          repository: vtex-apps/cy-runner
          ref: main
          path: cy-runner
      - name: 'Set up NodeJS'
        if: ( needs.safeCheck.outputs.substantialChanges == true ) || ( github.event_name == 'schedule' )
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: yarn
      - name: 'Install packages'
        if: ( needs.safeCheck.outputs.substantialChanges == true ) || ( github.event_name == 'schedule' )
        run: |
          PWD=$(pwd)
          for DIR in '.' 'node' 'react'; do
            if [[ -f "$DIR/package.json" ]]; then
              echo "Installing $DIR packages..."
              cd "$PWD/$DIR"
              yarn install --frozen-lockfile
            fi
          done
      - name: 'Install Cy-Runner'
        if: ( needs.safeCheck.outputs.substantialChanges == true ) || ( github.event_name == 'schedule' )
        run: |
          yarn install --frozen-lockfile 
          rm -rf .git
          yarn cypress info
        working-directory: cy-runner
      - name: 'Run Cy-Runner'
        if: ( needs.safeCheck.outputs.substantialChanges == true ) || ( github.event_name == 'schedule' )
        run: yarn cy-r
        env:
          VTEX_QE: ${{ secrets.cypressJSON }}
          NODE_NO_WARNINGS: 1
      - name: Save results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cy-runner-logs
          path: |
            cy-runner/logs
            !cy-runner/logs/**/*.mp4
          retention-days: 3
