name: '[QE] Quality Engineering'

on:
  # Just for debugging purposes
  workflow_dispatch:

  # Allow this to be called by others
  workflow_call:
    inputs:
      runLint:
        description: 'Run Lint?'
        type: boolean
        default: false
        required: false
      runUnitTests:
        description: 'Run Unit Tests?'
        type: boolean
        default: false
        required: false
      runSonarcloudJS:
        description: 'Run SonarCloud for NodeJS?'
        type: boolean
        default: false
        required: false
      runSonarcloudDN:
        description: 'Run SonarCloud for dotNet?'
        type: boolean
        default: false
        required: false
      runCypress:
        description: 'Run Cypress?'
        type: boolean
        default: false
        required: false
    secrets:
      githubToken:
        description: 'A token to access GitHub staff'
        required: false
      sonarToken:
        description: 'A token to have access to SonarCloud'
        required: false
      cypressJson:
        description: 'A JSON to pass make Cy-Runner works'
        required: false

# Let's not allow concurrency
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:

  # check here if it is safe to run it on pull_request_target events
  safe:
    name: 'Security check'
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - name: 'Stop if from out side without the label "safe to test"'
        if: >-
          ( github.event.pull_request.head.repo.fork == true ) &&
          ( !contains(github.event.pull_request.labels.*.name, 'safe to test') )
        run: |
          echo "Attention:"
          echo " "
          echo "ðŸ’¡ Thank you for submitting your contribution on this repository!"
          echo "   Before merge this PR, it must pass our Quality Engineering process."
          echo "   Please, ask for someone from VTEX to read your changes and add the label 'safe to test' on your PR."
          echo " "
          echo "   If you made changes after the approval, someone needs redo the label thing."
          exit 1

  lint:
    name: 'Lint'
    if: ${{ inputs.runLint }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [ safe ]
    steps:
      - name: 'Checkout if same repo'
        uses: actions/checkout@v3
        if: ( github.event.pull_request.head.repo.fork == false )
      - name: 'Checkout if fork'
        uses: actions/checkout@v3
        if: ( github.event.pull_request.head.repo.fork == true )
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
      - name: 'Set up NodeJS'
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: yarn
      - name: 'Install yarn packages'
        run: |
          PWD=$(pwd)
          if [[ -f "package.json" ]]; then
            echo "Install root packages"
            yarn install --frozen-lockfile
          fi
          if [[ -f "./node/package.json" ]]; then
            echo "Install node packages"
            cd ./node && yarn install --frozen-lockfile
            cd $PWD
          fi
          if [[ -f "./react/package.json" ]]; then
            echo "Install react packages"
            cd ./react && yarn install --frozen-lockfile
            cd $PWD
          fi
      - name: 'Run lint'
        run: yarn lint

  unitTests:
    name: 'Unit tests'
    if: ${{ inputs.runUnitTests }}
    runs-on: ubuntu-latest
    needs: [ lint ]
    steps:
      - name: 'Checkout if same repo'
        uses: actions/checkout@v3
        if: ( github.event.pull_request.head.repo.fork == false )
      - name: 'Checkout if fork'
        uses: actions/checkout@v3
        if: ( github.event.pull_request.head.repo.fork == true )
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
      - name: 'Set up NodeJS'
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: yarn
      - name: 'Not ready yet'
        run: echo 1

  sonarcloudJS:
    name: 'SonarCloud | JS'
    if: ( inputs.runSonarcloudJS ) && ( github.actor != 'dependabot[bot]' )
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [ lint ]
    steps:
      - name: 'Checkout if same repo'
        uses: actions/checkout@v3
        if: ( github.event.pull_request.head.repo.fork == false )
        with:
          fetch-depth: 0
      - name: 'Checkout if fork'
        uses: actions/checkout@v3
        if: ( github.event.pull_request.head.repo.fork == true )
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          fetch-depth: 0
      - name: 'Set up NodeJS'
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: yarn
      - name: 'Install yarn packages'
        run: |
          PWD=$(pwd)
          if [[ -f "package.json" ]]; then
            echo "Install root packages"
            yarn install --frozen-lockfile
          fi
          if [[ -f "./node/package.json" ]]; then
            echo "Install node packages"
            cd ./node && yarn install --frozen-lockfile
            cd $PWD
          fi
          if [[ -f "./react/package.json" ]]; then
            echo "Install react packages"
            cd ./react && yarn install --frozen-lockfile
            cd $PWD
          fi
      - name: 'SonarCloud Scan'
        uses: SonarSource/sonarcloud-github-action@v1.6
        env:
          GITHUB_TOKEN: ${{ secrets.githubToken }}
          SONAR_TOKEN: ${{ secrets.sonarToken }}

  sonarcloudDN:
    name: 'SonarCloud | C#'
    if: ( inputs.runSonarcloudDN ) && ( github.actor != 'dependabot[bot]' )
    runs-on: ubuntu-latest
    needs: [ safe ]
    steps:
      - name: 'Checkout main repo'
        uses: actions/checkout@v3
      - name: 'Set up NodeJS'
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: yarn
      - name: 'Not ready yet'
        run: echo 1

  cypress:
    name: 'Cypress'
    if: ( inputs.runCypress ) && ( github.event.pull_request.draft == false )
    runs-on: ubuntu-latest
    needs: [ lint ]
    steps:
      - name: 'Checkout if same repo'
        uses: actions/checkout@v3
        if: ( github.event.pull_request.head.repo.fork == false )
        with:
          fetch-depth: 0
      - name: 'Checkout if fork'
        uses: actions/checkout@v3
        if: ( github.event.pull_request.head.repo.fork == true )
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          fetch-depth: 0
      - name: 'Checkout Cy-Runner'
        uses: actions/checkout@v3
        with:
          repository: vtex-apps/cy-runner
          ref: main
          path: cy-runner
      - name: 'Set up NodeJS'
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: yarn
      - name: 'Install yarn packages'
        run: |
          PWD=$(pwd)
          if [[ -f "package.json" ]]; then
            echo "Install root packages"
            yarn install --frozen-lockfile
          fi
          if [[ -f "./node/package.json" ]]; then
            echo "Install node packages"
            cd ./node && yarn install --frozen-lockfile
            cd $PWD
          fi
          if [[ -f "./react/package.json" ]]; then
            echo "Install react packages"
            cd ./react && yarn install --frozen-lockfile
            cd $PWD
          fi
          if [[ -f "./cy-runner/package.json" ]]; then
            echo "Install cy-runner packages"
            cd ./cy-runner && yarn install --frozen-lockfile && rm -rf .git
            cd $PWD
          fi
      - name: 'Check Cypress version'
        run: yarn cypress info
        working-directory: ./cy-runner
      - name: 'Run Cy-Runner'
        run: yarn cy-r
        env:
          VTEX_QE: ${{ secrets.cypressJSON }}
      - name: Save E2E logs
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-logs
          path: |
            cy-runner/logs
            !cy-runner/logs/**/*.mp4
